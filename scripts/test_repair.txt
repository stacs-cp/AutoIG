import json
import os
import argparse
import subprocess

def main():

    parser = argparse.ArgumentParser(
            description="Starting generating repaid models:"
        )

    # getting directory of the problem model
    parser.add_argument(
        "--problemDir",
        type=str,
        help="location of the essence problem",
        required=True
    )
    args = parser.parse_args()
    path = args.problemDir
    if not os.path.isdir(path):
        print(f"Error: The directory '{path}' does not exist.")
    else:
        files = os.listdir(path)


    # the path of the specific problem in that direcory
    if files:
        for i in files:
            if i.find(".essence"): 
                problemPath = os.path.join(path, files[0])  
        

    # creating the generator and the repair using conjure
    command = "conjure parameter-generator " 
    command += str(problemPath)
    subprocess.run(command, shell=True, capture_output=True, text=True)
    command = "rm " + str(path) + "/*.irace"
    subprocess.run(command, shell=True, capture_output=True, text=True)
    files = os.listdir(path)
    for i in files:
        if i.find("Generator.essence"):
            generator = i

    # this is the command which creates the second repair file, which is not implemented in conjure yet
    command = "conjure repair-generator " + str(path) + "/"+str(generator)
    # print(command)
    # res = subprocess.run(command, shell=True, capture_output=True, text=True)



    # for now instead of using the repair generated by the command above we will use our own one (repair.essence) which is stored in the scripts directory
    command = "cp repair.essence " + str(path)
    subprocess.run(command, shell=True, capture_output=True, text=True)
    files = os.listdir(path)
    for i in files:
        if i.find("Repair.essence")!=-1:
            repairFile1 = i
        if i.find("repair.essence")!=-1:
            repairFile2 = i
    

    # transform both repairs into JSON and compare them
    command = "conjure pretty "+ str(path)+"/"+str(repairFile1)+" --output-format=astjson > "+ str(path) + "/repair1_json.JSON"
    subprocess.run(command, shell=True, capture_output=True, text=True)
    with open(str(path) + "/repair1_json.JSON", 'r') as f:
        r1 = json.load(f)
    command = "conjure pretty "+ str(path)+"/"+str(repairFile2)+" --output-format=astjson > "+ str(path) + "/repair2_json.JSON"
    subprocess.run(command, shell=True, capture_output=True, text=True)
    with open(str(path) + "/repair2_json.JSON", 'r') as f:
        r2 = json.load(f)
    if r1==r2:
        print("same")
    else:
        print("different")


main()

    