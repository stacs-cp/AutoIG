#------------------------------------------------------------------------------
# irace: An implementation in R of (Elitist) Iterated Racing
# Version: 3.4.1.9fcaeaf
# Copyright (C) 2010-2020
# Manuel Lopez-Ibanez     <manuel.lopez-ibanez@manchester.ac.uk>
# Jeremie Dubois-Lacoste  
# Leslie Perez Caceres    <leslie.perez.caceres@ulb.ac.be>
#
# This is free software, and you are welcome to redistribute it under certain
# conditions.  See the GNU General Public License for details. There is NO
# WARRANTY; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# irace builds upon previous code from the race package:
#     race: Racing methods for the selection of the best
#     Copyright (C) 2003 Mauro Birattari
#------------------------------------------------------------------------------
# installed at: /AutoIG/bin/irace
# called with: --seed 42 --scenario /AutoIG/scripts/scenario.R --parameter-file params.irace --train-instances-file instances --exec-dir ./ --max-experiments 180 --target-runner /AutoIG/scripts/target-runner --debug-level 2
## irace scenario:
scenarioFile = "./scenario.txt"
parameterFile = "/AutoIG/experiments/simple_mzn_discriminating/params.irace"
execDir = "/AutoIG/experiments/simple_mzn_discriminating"
logFile = "/AutoIG/experiments/simple_mzn_discriminating/irace.Rdata"
recoveryFile = NULL
instances = "dummy"
initConfigurations = NULL
trainInstancesDir = ""
trainInstancesFile = "/AutoIG/experiments/simple_mzn_discriminating/instances"
configurationsFile = ""
forbiddenExps = NULL = expression()
forbiddenFile = ""
targetRunner = "/AutoIG/scripts/target-runner"
targetRunnerRetries = 0
targetRunnerData = ""
targetRunnerParallel = NULL
targetEvaluator = NULL
maxExperiments = 180
maxTime = 0
budgetEstimation = 0.02
digits = 4
debugLevel = 2
nbIterations = 0
nbExperimentsPerIteration = 0
sampleInstances = TRUE
testType = "friedman"
firstTest = 5
eachTest = 1
minNbSurvival = 0
nbConfigurations = 0
mu = 5
confidence = 0.95
deterministic = FALSE
seed = 42
parallel = 0
loadBalancing = TRUE
mpi = FALSE
batchmode = "0"
softRestart = TRUE
softRestartThreshold = 1e-04
testInstancesDir = ""
testInstancesFile = ""
testInstances = NULL
testNbElites = 1
testIterationElites = FALSE
elitist = TRUE
elitistNewInstances = 1
elitistLimit = 2
repairConfiguration = function (id, allConfigurations, parameters, digits, nConfsPreviousRaces = 0) {    outputDir <- "./detailed-output/"    configuration <- allConfigurations[id - nConfsPreviousRaces,         ]    require(data.table)    repairModel <- paste(outputDir, "/repair.eprime", sep = "")    if (!file.exists(repairModel))         return(configuration)    start_time <- Sys.time()    originalConfiguration <- configuration    baseFileName <- id    outFile <- paste(outputDir, "/repairout-", baseFileName,         sep = "")    if (file.exists(outFile)) {        configuration <- fread(outFile)        return(configuration)    }    lsParams <- sort(parameters$names)    for (param in lsParams) {        maxParam <- NA        if (endsWith(param, "_min")) {            maxParam <- paste(substr(param, 1, nchar(param) -                 3), "max", sep = "")        }        else if (endsWith(param, "Min")) {            maxParam <- paste(substr(param, 1, nchar(param) -                 3), "Max", sep = "")        }        if (!is.na(maxParam)) {            minVal <- min(configuration[[param]], configuration[[maxParam]])            maxVal <- max(configuration[[param]], configuration[[maxParam]])            configuration[[param]] <- minVal            configuration[[maxParam]] <- maxVal        }    }    paramFile <- paste(outputDir, "/repair-", baseFileName, ".param",         sep = "")    lsLines <- c()    for (paramName in colnames(configuration)) {        if (!(paramName %in% c(".ID.", ".PARENT."))) {            val <- configuration[[paramName]]            lsLines <- c(lsLines, paste("letting", paramName,                 "be", val))        }    }    writeLines(lsLines, con <- file(paramFile))    close(con)    seed <- as.integer(id)    cmd <- paste("conjure solve repair.essence ", paramFile,         " -o ", outputDir, " --use-existing-model repair.eprime ",         " --solver-options \"-timelimit 120 -varorder domoverwdeg -randomiseorder",         "-randomseed", seed, "\"", " --copy-solutions=off")    cat(cmd, "\n")    exitCode <- system(cmd, intern = FALSE, wait = TRUE)    if (exitCode != 0) {        cat("ERROR while repairing configuration \n")        print(configuration)        return(NULL)    }    solutionFile <- paste(outputDir, "/repair-repair-", baseFileName,         "-solution000001.solution", sep = "")    lsLines <- readLines(con <- file(solutionFile))    close(con)    lsLines <- gsub("repaired_", "", lsLines)    lsLines <- lsLines[grep("letting ", lsLines)]    baseTempName <- paste(outputDir, "/repair-repair-", baseFileName,         sep = "")    for (endName in c(".eprime-info", ".eprime-infor", ".eprime-minion",         ".eprime-param", "-solution000001.eprime-solution", "-solution000001.solution")) {        file.remove(paste(baseTempName, endName, sep = ""))    }    file.remove(paramFile)    for (paramName in colnames(configuration)) {        if (!(paramName %in% c(".ID.", ".PARENT."))) {            pattern <- paste("letting ", paramName, " be ", sep = "")            s <- lsLines[grep(pattern, lsLines)]            newVal <- as.integer(trimws(strsplit(s, " be ")[[1]][2]))            configuration[[paramName]] <- newVal        }    }    cat("\nBefore repair: \n")    print(originalConfiguration)    cat("After repair: \n")    print(configuration)    cat("\n")    end_time <- Sys.time()    cat("\nRepairing time: ", round(end_time - start_time, 2),         " seconds\n")    write.csv(configuration, file = outFile, row.names = FALSE)    return(configuration)}
capping = FALSE
cappingType = "median"
boundType = "candidate"
boundMax = NULL
boundDigits = 0
boundPar = 1
boundAsTimeout = TRUE
postselection = 0
aclib = FALSE
## end of irace scenario
# --- Parameters Hierarchy ---
[1] "Ag"               "Tg"               "Xg"               "Zg"               "ground_coverage"  "avg_height_ratio"
              Ag               Tg               Xg               Zg  ground_coverage avg_height_ratio 
               1                1                1                1                1                1 
              Ag               Tg               Xg               Zg  ground_coverage avg_height_ratio 
              ""               ""               ""               ""               ""               "" 
         Parameter Level Depends.on
1               Ag     1           
2               Tg     1           
3               Xg     1           
4               Zg     1           
5  ground_coverage     1           
6 avg_height_ratio     1           

# ------------------------
$names
[1] "Ag"               "Tg"               "Xg"               "Zg"               "ground_coverage"  "avg_height_ratio"

$types
              Ag               Tg               Xg               Zg  ground_coverage avg_height_ratio 
             "i"              "i"              "i"              "i"              "i"              "i" 

$switches
                  Ag                   Tg                   Xg                   Zg      ground_coverage     avg_height_ratio 
              "-Ag "               "-Tg "               "-Xg "               "-Zg "  "-ground_coverage " "-avg_height_ratio " 

$domain
$domain$Ag
[1] 1 3

$domain$Tg
[1]  1 20

$domain$Xg
[1]  3 10

$domain$Zg
[1] 2 3

$domain$ground_coverage
[1]   1 100

$domain$avg_height_ratio
[1]   0 100


$conditions
$conditions$Ag
[1] TRUE

$conditions$Tg
[1] TRUE

$conditions$Xg
[1] TRUE

$conditions$Zg
[1] TRUE

$conditions$ground_coverage
[1] TRUE

$conditions$avg_height_ratio
[1] TRUE


$isFixed
              Ag               Tg               Xg               Zg  ground_coverage avg_height_ratio 
           FALSE            FALSE            FALSE            FALSE            FALSE            FALSE 

$transform
$transform$Ag
[1] ""

$transform$Tg
[1] ""

$transform$Xg
[1] ""

$transform$Zg
[1] ""

$transform$ground_coverage
[1] ""

$transform$avg_height_ratio
[1] ""


$depends
$depends$Ag
character(0)

$depends$Tg
character(0)

$depends$Xg
character(0)

$depends$Zg
character(0)

$depends$ground_coverage
character(0)

$depends$avg_height_ratio
character(0)


$hierarchy
              Ag               Tg               Xg               Zg  ground_coverage avg_height_ratio 
               1                1                1                1                1                1 

$nbParameters
[1] 6

$nbFixed
[1] 0

$nbVariable
[1] 6

# 2024-10-23 16:59:11 UTC: Parameters have been read
# 2024-10-23 16:59:11 UTC: Initialization
# Elitist race
# Elitist new instances: 1
# Elitist limit: 2
# nbIterations: 4
# minNbSurvival: 4
# nbParameters: 6
# seed: 42
# confidence level: 0.95
# budget: 180
# mu: 5
# deterministic: FALSE

# 2024-10-23 16:59:11 UTC: Iteration 1 of 4
# experimentsUsedSoFar: 0
# remainingBudget: 180
# currentBudget: 45
# nbConfigurations: 7
# 2024-10-23 16:59:11 UTC: Sample 7 configurations from uniform distribution
Loading required package: data.table
# 2024-10-23 16:59:11 UTC: Configurations for the race n 1 (elite configurations listed first, then new configurations):
  .ID. Ag Tg Xg Zg ground_coverage avg_height_ratio .PARENT.
1    1  2 17  3  3              63               14       NA
2    2  1 10  9  3              82               17       NA
3    3  3  6  4  3              33               78       NA
4    4  2 14  9  2               3               13       NA
5    5  3 19  7  3              20               54       NA
6    6  1 10  5  2              19               73       NA
7    7  2  9  6  2              14               83       NA
# 2024-10-23 16:59:11 UTC: Launch race
# Markers:
     x No test is performed.
     c Configurations are discarded only due to capping.
     - The test is performed and some configurations are discarded.
     = The test is performed but no configuration is discarded.
     ! The test is performed and configurations could be discarded but elite configurations are preserved.
     . All alive configurations are elite and nothing is discarded

+-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+
| |   Instance|      Alive|       Best|      Mean best| Exp so far|  W time|  rho|KenW|  Qvar|
+-+-----------+-----------+-----------+---------------+-----------+--------+-----+----+------+
# 2024-10-23 16:59:11 UTC: /AutoIG/scripts/target-runner 1 1 1965286212 dummy   -Ag 2 -Tg 17 -Xg 3 -Zg 3 -ground_coverage 63 -avg_height_ratio 14
# 2024-10-23 16:59:16 UTC: DONE (1) Elapsed wall-clock seconds: 4.21
python3 -u /AutoIG/scripts/wrapper.py 1 1 1965286212 dummy -Ag 2 -Tg 17 -Xg 3 -Zg 3 -ground_coverage 63 -avg_height_ratio 14 > detailed-output/out-1-1965286212 2>&1
0 3.72
Error: == irace == The output of targetRunner should not be more than two numbers!
== irace == The call to targetRunner was:
/AutoIG/scripts/target-runner 1 1 1965286212 dummy   -Ag 2 -Tg 17 -Xg 3 -Zg 3 -ground_coverage 63 -avg_height_ratio 14
== irace == The output was:
python3 -u /AutoIG/scripts/wrapper.py 1 1 1965286212 dummy -Ag 2 -Tg 17 -Xg 3 -Zg 3 -ground_coverage 63 -avg_height_ratio 14 > detailed-output/out-1-1965286212 2>&1
0 3.72
== irace == This is not a bug in irace, but means that something failed when running the command(s) above or they were terminated before completion. Try to run the command(s) above from the execution directory '/AutoIG/experiments/simple_mzn_discriminating' to investigate the issue. See also Appendix B (targetRunner troubleshooting checklist) of the User Guide (https://cran.r-project.org/package=irace/vignettes/irace-package.pdf).
