language Essence 1.3
$ prob001.essence: Car Sequencing
$ Problem details available at http://www.csplib.org/Problems/prob001/

given n_cars, n_classes, n_options : int(1..)

letting Slots  be domain int(1..n_cars),
        Class  be domain int(1..n_classes),
        Option be domain int(1..n_options),

given quantity : function (total) Class  --> int(1..),
      maxcars  : function (total) Option --> int(1..10),
      blksize_delta  : function (total) Option --> int(1..10),
      usage    : relation (minSize 1) of ( Class * Option )

$ There must be at least as many cars as there are n_classes as quantity is indexed from 1..
where n_cars >= n_classes

$ The sum of the cars in the quantity function should equal n_cars 
where ( sum quant : Class . quantity(quant) ) = n_cars

$ Blksize must be greater than maxcars for all options
$ where forAll option: Option . maxcars(option) < blksize(option)

$ Make sure that all options are used at least once
where  forAll option: Option .  |toSet(usage(_,option))| >= 1

$ Make sure that all classes have at least one option
where  forAll class: Class .  |toSet(usage(class,_))| >= 1

find car : function (total) Slots --> Class

such that
    forAll c : Class . |preImage(car,c)| = quantity(c),
    forAll opt : Option .
        forAll s : int(1..n_cars+1-(maxcars(opt)+blksize_delta(opt))) .
            (sum i : int(s..s+(maxcars(opt)+blksize_delta(opt))-1) . toInt(usage(car(i),opt))) <= maxcars(opt)
