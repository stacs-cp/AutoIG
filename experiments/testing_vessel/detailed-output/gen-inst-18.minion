MINION 3
**VARIABLES**
DISCRETE width_Function1D_00001 #
{1..12}
DISCRETE width_Function1D_00002 #
{1..12}
DISCRETE width_Function1D_00003 #
{1..12}
DISCRETE width_Function1D_00004 #
{1..12}
DISCRETE width_Function1D_00005 #
{1..12}
DISCRETE width_Function1D_00006 #
{1..12}
DISCRETE length_Function1D_00001 #
{1..45}
DISCRETE length_Function1D_00002 #
{1..45}
DISCRETE length_Function1D_00003 #
{1..45}
DISCRETE length_Function1D_00004 #
{1..45}
DISCRETE length_Function1D_00005 #
{1..45}
DISCRETE length_Function1D_00006 #
{1..45}
DISCRETE aux0 #Active-CSE: 3 occurrences of this expression or equivalent: ((length_Function1D_00001 * width_Function1D_00001) + (length_Function1D_00002 * width_Function1D_00002) + (length_Function1D_00003 * width_Function1D_00003) + (length_Function1D_00004 * width_Function1D_00004) + (length_Function1D_00005 * width_Function1D_00005) + (length_Function1D_00006 * width_Function1D_00006))
{54..97}
DISCRETE aux1 #(length_Function1D_00001 * width_Function1D_00001)
{1..92}
DISCRETE aux2 #(length_Function1D_00002 * width_Function1D_00002)
{1..92}
DISCRETE aux3 #(length_Function1D_00003 * width_Function1D_00003)
{1..92}
DISCRETE aux4 #(length_Function1D_00004 * width_Function1D_00004)
{1..92}
DISCRETE aux5 #(length_Function1D_00005 * width_Function1D_00005)
{1..92}
DISCRETE aux6 #(length_Function1D_00006 * width_Function1D_00006)
{1..92}
**SEARCH**
PRINT[[width_Function1D_00001],[width_Function1D_00002],[width_Function1D_00003],[width_Function1D_00004],[width_Function1D_00005],[width_Function1D_00006],[length_Function1D_00001],[length_Function1D_00002],[length_Function1D_00003],[length_Function1D_00004],[length_Function1D_00005],[length_Function1D_00006]]
VARORDER STATIC [width_Function1D_00001, width_Function1D_00002, width_Function1D_00003, width_Function1D_00004, width_Function1D_00005, width_Function1D_00006, length_Function1D_00001, length_Function1D_00002, length_Function1D_00003, length_Function1D_00004, length_Function1D_00005, length_Function1D_00006]
**TUPLELIST**
negativeSol 9 12
10 6 2 2 2 1 4 8 2 1 1 1
12 9 1 4 1 1 2 6 1 4 1 1
5 3 1 4 8 8 13 3 3 1 1 1
3 4 3 1 8 1 1 2 1 1 10 1
8 4 2 1 1 1 11 1 1 1 1 1
12 12 4 3 1 1 5 1 5 1 1 1
3 6 1 1 11 6 3 5 1 1 4 2
1 8 5 6 4 1 1 4 1 9 1 1
9 9 4 1 1 1 7 3 1 1 1 1
**CONSTRAINTS**
w-inintervalset(aux1, [1,46,48,52,54,58,60,60,62,66,68,70,72,72,74,78,80,82,84,88,90,92])
w-inintervalset(aux2, [1,46,48,52,54,58,60,60,62,66,68,70,72,72,74,78,80,82,84,88,90,92])
w-inintervalset(aux3, [1,46,48,52,54,58,60,60,62,66,68,70,72,72,74,78,80,82,84,88,90,92])
w-inintervalset(aux4, [1,46,48,52,54,58,60,60,62,66,68,70,72,72,74,78,80,82,84,88,90,92])
w-inintervalset(aux5, [1,46,48,52,54,58,60,60,62,66,68,70,72,72,74,78,80,82,84,88,90,92])
w-inintervalset(aux6, [1,46,48,52,54,58,60,60,62,66,68,70,72,72,74,78,80,82,84,88,90,92])
product(length_Function1D_00001, width_Function1D_00001, aux1)
product(length_Function1D_00002, width_Function1D_00002, aux2)
product(length_Function1D_00003, width_Function1D_00003, aux3)
product(length_Function1D_00004, width_Function1D_00004, aux4)
product(length_Function1D_00005, width_Function1D_00005, aux5)
product(length_Function1D_00006, width_Function1D_00006, aux6)
sumleq([aux1,aux2,aux3,aux4,aux5,aux6],aux0)
sumgeq([aux1,aux2,aux3,aux4,aux5,aux6],aux0)
negativetable([width_Function1D_00001,width_Function1D_00002,width_Function1D_00003,width_Function1D_00004,width_Function1D_00005,width_Function1D_00006,length_Function1D_00001,length_Function1D_00002,length_Function1D_00003,length_Function1D_00004,length_Function1D_00005,length_Function1D_00006
],negativeSol)
**EOF**